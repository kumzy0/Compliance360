@page
@model Compliance360.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_DashboardLayout";
}

<!-- Styles -->
<style>
    #chartdiv {
        width: 100%;
        height: 400px;
    }
    #piediv {
        width: 100%;
        height: 400px;
    }
</style>


<div class="jumbtron p-2">
    <div class="row">
        <div class="col-lg-9">
            <h5>Welcome back Company A!</h5>
            <p> <span>You are currently have, </span> <span class="font-weight-bold">one </span> ongoing and  <span class="font-weight-bold">five </span> <span>completed SCUML Applications. Your annual return is in good shape, well done!</span></p>
        </div>
        <div class="col-lg-3">
            <div class="signinimage">
                <img src="~/img/dahboard.png" />
            </div>

        </div>

    </div>

</div>

<div class="row">
    <div class="col-lg-3">
        <div class="card">
            <div class="p-2">
                <div class="avatar bg-rgba-primary p-50 m-0 cardimg">
                    <div class="avatar-content">
                        <i class="feather icon-grid text-primary font-medium-5"></i>
                    </div>
                </div>
                <div>
                    <h2 class="text-bold-700 mb-25">92.6k</h2>
                    <p class="mb-0">Tax Documentation</p>
                </div>

            </div>

        </div>
    </div>

    <div class="col-lg-3">
        <div class="card">
            <div class="p-2">
                <div class="avatar bg-rgba-warning p-50 m-0 cardimg">
                    <div class="avatar-content">
                        <i class="feather icon-file-plus text-warning font-medium-5"></i>
                    </div>
                </div>
                <div>
                    <h2 class="text-bold-700 mb-25">92.6k</h2>
                    <p class="mb-0">SCUML Applications</p>
                </div>

            </div>

        </div>

    </div>

    <div class="col-lg-3">
        <div class="card">
            <div class="p-2">
                <div class="avatar bg-rgba-success p-50 m-0 cardimg">
                    <div class="avatar-content">
                        <i class="feather icon-bar-chart text-success font-medium-5"></i>
                    </div>
                </div>
                <div>
                    <h2 class="text-bold-700 mb-25">92.6k</h2>
                    <p class="mb-0">Annual return</p>
                </div>

            </div>

        </div>

    </div>
    <div class="col-lg-3">

        <div class="card">
            <div class="p-2">
                <div class="avatar bg-rgba-danger p-50 m-0 cardimg">
                    <div class="avatar-content">
                        <i class="feather icon-bookmark text-danger font-medium-5"></i>
                    </div>
                </div>
                <div>
                    <h2 class="text-bold-700 mb-25">92.6k</h2>
                    <p class="mb-0">Payment history</p>
                </div>

            </div>

        </div>

    </div>
</div>


<div class="row">
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h4>Annual return</h4>
                <i class="feather icon-more-horizontal "></i>
            </div>
            <div class="card-body">
                <div id="chartdiv"></div>
            </div>
        </div>
        
    </div>
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h4>Companies</h4>
                <i class="feather icon-more-horizontal "></i>
            </div>
            <div class="card-body">
                <div id="piediv"></div>
            </div>
        </div>
    </div>
</div>


<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<!-- Chart code -->
<script>
    am5.ready(function () {

        // Create root element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root = am5.Root.new("chartdiv");


        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root.setThemes([am5themes_Animated.new(root)]);


        // Create chart
        // https://www.amcharts.com/docs/v5/charts/xy-chart/
        var chart = root.container.children.push(
            am5xy.XYChart.new(root, {
                panX: false,
                panY: false,
                wheelX: "none",
                wheelY: "none"
            })
        );


        // Create axes
        // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
        var yRenderer = am5xy.AxisRendererY.new(root, { minGridDistance: 30 });

        var yAxis = chart.yAxes.push(
            am5xy.CategoryAxis.new(root, {
                maxDeviation: 0,
                categoryField: "country",
                renderer: yRenderer
            })
        );

        var xAxis = chart.xAxes.push(
            am5xy.ValueAxis.new(root, {
                maxDeviation: 0,
                min: 0,
                renderer: am5xy.AxisRendererX.new(root, {})
            })
        );


        // Create series
        // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
        var series = chart.series.push(
            am5xy.ColumnSeries.new(root, {
                name: "Series 1",
                xAxis: xAxis,
                yAxis: yAxis,
                valueXField: "value",
                sequencedInterpolation: true,
                categoryYField: "country"
            })
        );

        var columnTemplate = series.columns.template;

        columnTemplate.setAll({
            draggable: true,
            cursorOverStyle: "pointer",
            tooltipText: "drag to rearrange",
            cornerRadiusBR: 10,
            cornerRadiusTR: 10
        });
        columnTemplate.adapters.add("fill", (fill, target) => {
            return chart.get("colors").getIndex(series.columns.indexOf(target));
        });

        columnTemplate.adapters.add("stroke", (stroke, target) => {
            return chart.get("colors").getIndex(series.columns.indexOf(target));
        });

        columnTemplate.events.on("dragstop", () => {
            sortCategoryAxis();
        });

        // Get series item by category
        function getSeriesItem(category) {
            for (var i = 0; i < series.dataItems.length; i++) {
                var dataItem = series.dataItems[i];
                if (dataItem.get("categoryY") == category) {
                    return dataItem;
                }
            }
        }


        // Axis sorting
        function sortCategoryAxis() {
            // Sort by value
            series.dataItems.sort(function (x, y) {
                return y.get("graphics").y() - x.get("graphics").y();
            });

            var easing = am5.ease.out(am5.ease.cubic);

            // Go through each axis item
            am5.array.each(yAxis.dataItems, function (dataItem) {
                // get corresponding series item
                var seriesDataItem = getSeriesItem(dataItem.get("category"));

                if (seriesDataItem) {
                    // get index of series data item
                    var index = series.dataItems.indexOf(seriesDataItem);

                    var column = seriesDataItem.get("graphics");

                    // position after sorting
                    var fy =
                        yRenderer.positionToCoordinate(yAxis.indexToPosition(index)) -
                        column.height() / 2;

                    // set index to be the same as series data item index
                    if (index != dataItem.get("index")) {
                        dataItem.set("index", index);

                        // current position
                        var x = column.x();
                        var y = column.y();

                        column.set("dy", -(fy - y));
                        column.set("dx", x);

                        column.animate({ key: "dy", to: 0, duration: 600, easing: easing });
                        column.animate({ key: "dx", to: 0, duration: 600, easing: easing });
                    } else {
                        column.animate({ key: "y", to: fy, duration: 600, easing: easing });
                        column.animate({ key: "x", to: 0, duration: 600, easing: easing });
                    }
                }
            });

            // Sort axis items by index.
            // This changes the order instantly, but as dx and dy is set and animated,
            // they keep in the same places and then animate to true positions.
            yAxis.dataItems.sort(function (x, y) {
                return x.get("index") - y.get("index");
            });
        }

        // Set data
        var data = [{
            country: "USA",
            value: 2025
        }, {
            country: "China",
            value: 1882
        }, {
            country: "Japan",
            value: 1809
        }, {
            country: "Germany",
            value: 1322
        }, {
            country: "UK",
            value: 1122
        }];

        yAxis.data.setAll(data);
        series.data.setAll(data);


        // Make stuff animate on load
        // https://www.amcharts.com/docs/v5/concepts/animations/
        series.appear(1000);
        chart.appear(1000, 100);

    }); // end am5.ready()
</script>



<!-- Chart code -->
<script>
    am5.ready(function () {

        // Create root element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root = am5.Root.new("piediv");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root.setThemes([
            am5themes_Animated.new(root)
        ]);

        // Create chart
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
        var chart = root.container.children.push(
            am5percent.PieChart.new(root, {
                startAngle: 160, endAngle: 380
            })
        );

        // Create series
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series

        var series0 = chart.series.push(
            am5percent.PieSeries.new(root, {
                valueField: "litres",
                categoryField: "country",
                startAngle: 160,
                endAngle: 380,
                radius: am5.percent(70),
                innerRadius: am5.percent(65)
            })
        );

        var colorSet = am5.ColorSet.new(root, {
            colors: [series0.get("colors").getIndex(0)],
            passOptions: {
                lightness: -0.05,
                hue: 0
            }
        });

        series0.set("colors", colorSet);

        series0.ticks.template.set("forceHidden", true);
        series0.labels.template.set("forceHidden", true);

        var series1 = chart.series.push(
            am5percent.PieSeries.new(root, {
                startAngle: 160,
                endAngle: 380,
                valueField: "bottles",
                innerRadius: am5.percent(80),
                categoryField: "country"
            })
        );

        series1.ticks.template.set("forceHidden", true);
        series1.labels.template.set("forceHidden", true);

        var label = chart.seriesContainer.children.push(
            am5.Label.new(root, {
                textAlign: "center",
                centerY: am5.p100,
                centerX: am5.p50,
                text: "[fontSize:18px]total[/]:\n[bold fontSize:30px]1647.9[/]"
            })
        );

        var data = [
            {
                country: "Lithuania",
                litres: 501.9,
                bottles: 1500
            },
            {
                country: "Czech Republic",
                litres: 301.9,
                bottles: 990
            },
            {
                country: "Ireland",
                litres: 201.1,
                bottles: 785
            },
            {
                country: "Germany",
                litres: 165.8,
                bottles: 255
            },
            {
                country: "Australia",
                litres: 139.9,
                bottles: 452
            },
            {
                country: "Austria",
                litres: 128.3,
                bottles: 332
            },
            {
                country: "UK",
                litres: 99,
                bottles: 150
            },
            {
                country: "Belgium",
                litres: 60,
                bottles: 178
            },
            {
                country: "The Netherlands",
                litres: 50,
                bottles: 50
            }
        ];

        // Set data
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data
        series0.data.setAll(data);
        series1.data.setAll(data);

    }); // end am5.ready()
</script>